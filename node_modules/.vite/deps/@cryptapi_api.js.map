{
  "version": 3,
  "sources": ["../../@cryptapi/api/index.js"],
  "sourcesContent": ["/**\n * CryptAPI's NodeJS Library\n * @author CryptAPI <info@cryptapi.io>\n */\nclass CryptAPI {\n    static #baseURL = 'https://api.cryptapi.io'\n\n    constructor(coin, ownAddress, callbackUrl, parameters = {}, caParams = {}) {\n        CryptAPI.getSupportedCoins().then(validCoins => {\n            if (!validCoins.hasOwnProperty(coin)) {\n                throw new Error('The cryptocurrency/token requested is not supported.')\n            }\n        })\n\n        this.coin = coin\n        this.ownAddress = ownAddress\n        this.callbackUrl = callbackUrl\n        this.parameters = parameters\n        this.caParams = caParams\n        this.paymentAddress = ''\n    }\n\n    /**\n     * Gets all the supported cryptocurrencies and tokens from the API\n     * @returns {Promise<{}|null>}\n     */\n    static async getSupportedCoins() {\n        const info = await this.getInfo(null, true)\n\n        if (!info) {\n            return null\n        }\n\n        delete info['fee_tiers']\n\n        const coins = {}\n\n        for (const chain of Object.keys(info)) {\n            const data = info[chain]\n            const isBaseCoin = data.hasOwnProperty('ticker')\n\n            if (isBaseCoin) {\n                coins[chain] = data\n            } else {\n                const baseTicker = `${chain}_`\n                Object.entries(data).forEach(([token, subData]) => {\n                    coins[baseTicker + token] = subData\n                })\n            }\n        }\n\n        return coins\n    }\n\n    /**\n     * Actually makes the request to the API returning the address.\n     * It's necessary to run this before running the other non-static functions\n     * @returns {Promise<*|null>}\n     */\n    async getAddress() {\n        if (!this.coin || !this.callbackUrl || !this.ownAddress) {\n            return null\n        }\n\n        let callbackUrl = new URL(this.callbackUrl)\n        const parameters = this.parameters\n    \n        if (Object.entries(parameters).length > 0) {\n            Object.entries(parameters).forEach(([k, v]) => callbackUrl.searchParams.append(k, v))\n        }\n        \n        let params = {...this.caParams, ...{\n                callback: encodeURI(callbackUrl.toString()),\n                address: this.ownAddress,\n            }}\n\n        const response = await CryptAPI.#_request(this.coin, 'create', params)\n\n        const addressIn = response.address_in\n\n        this.paymentAddress = addressIn\n        return addressIn\n    }\n\n    /**\n     * Checks the logs related to a request.\n     * (Can be used to check for callbacks)\n     * @returns {Promise<any|null>}\n     */\n    async checkLogs() {\n        if (!this.coin || !this.callbackUrl) {\n            return null\n        }\n\n        let callbackUrl = new URL(this.callbackUrl)\n        const parameters = this.parameters\n    \n        if (Object.entries(parameters).length > 0) {\n            Object.entries(parameters).forEach(([k, v]) => callbackUrl.searchParams.append(k, v))\n        }\n    \n        callbackUrl = encodeURI(callbackUrl.toString())\n        \n        return await CryptAPI.#_request(this.coin, 'logs', {\n            callback: callbackUrl\n        })\n    }\n\n    /**\n     * Gets the QRCode for a payment.\n     * @param value\n     * @param size\n     * @returns {Promise<any|null>}\n     */\n    async getQrcode(value = null, size = 512) {\n        const params = {\n            address: this.paymentAddress,\n        }\n\n        if (value) {\n            params['value'] = value\n        }\n\n        params['size'] = size\n\n        return await CryptAPI.#_request(this.coin, 'qrcode', params)\n    }\n\n    /**\n     * Get information related to a cryptocurrency/token.\n     * If coin=null it calls the /info/ endpoint returning general information\n     * @param coin\n     * @returns {Promise<any|null>}\n     */\n    static async getInfo(coin = null) {\n        const params = {}\n\n        if (!coin) {\n            params['prices'] = 0\n        }\n\n        return await this.#_request(coin, 'info', params)\n    }\n\n    /**\n     * Gets an estimate of the blockchain fees for the coin provided.\n     * @param coin\n     * @param addresses\n     * @param priority\n     * @returns {Promise<any|null>}\n     */\n    static async getEstimate(coin, addresses = 1, priority = 'default') {\n        return await CryptAPI.#_request(coin, 'estimate', {\n            addresses,\n            priority,\n        })\n    }\n\n    /**\n     * This method allows you to easily convert prices from FIAT to Crypto or even between cryptocurrencies\n     * @param coin\n     * @param value\n     * @param from\n     * @returns {Promise<any|null>}\n     */\n    static async getConvert(coin, value, from) {\n        let params = {\n            value,\n            from,\n        }\n\n        return await CryptAPI.#_request(coin, 'convert', params)\n    }\n\n    /**\n     * Helper function to make a request to API\n     * @param coin\n     * @param endpoint\n     * @param params\n     * @returns {Promise<any>}\n     */\n    static async #_request(coin, endpoint, params = {}) {\n        const url = coin ? new URL(`${this.#baseURL}/${coin.replace('_', '/')}/${endpoint}/`) : new URL(`${this.#baseURL}/${endpoint}/`)\n\n        if (params) {\n            Object.keys(params).forEach(key => url.searchParams.append(key, params[key]))\n        }\n        \n\n        const fetchParams = {\n            method: 'GET',\n            headers: {\n                referer: this.#baseURL\n            },\n            credentials: 'include'\n        }\n\n        const response = await fetch(url, fetchParams)\n\n        const response_obj = await response.json()\n\n        if ( response_obj.status === 'error' ) {\n            throw new Error(response_obj.error)\n        }\n\n        return response_obj\n    }\n}\n\nmodule.exports = CryptAPI\n"],
  "mappings": "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",
  "names": []
}
